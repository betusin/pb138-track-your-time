/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * TrackYourTime
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr,{
  SWRConfiguration,
  Key
} from 'swr'
import type {
  GetUserDto,
  GetProjectDto,
  UpdateUserDto
} from '.././model'


  type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


  /**
 * @summary Returns the profile of the current user
 */
export const meControllerProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUserDto>> => {
    return axios.get(
      `/me/profile`,options
    );
  }


export const getMeControllerProfileKey = () => [`/me/profile`];

    
export type MeControllerProfileQueryResult = NonNullable<Awaited<ReturnType<typeof meControllerProfile>>>
export type MeControllerProfileQueryError = AxiosError<void>

export const useMeControllerProfile = <TError = AxiosError<void>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof meControllerProfile>>, TError> & {swrKey: Key}, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? (() => getMeControllerProfileKey())
  const swrFn = () => meControllerProfile(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Returns all projects of the current user
 */
export const meControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProjectDto[]>> => {
    return axios.get(
      `/me/projects`,options
    );
  }


export const getMeControllerFindAllKey = () => [`/me/projects`];

    
export type MeControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof meControllerFindAll>>>
export type MeControllerFindAllQueryError = AxiosError<void>

export const useMeControllerFindAll = <TError = AxiosError<void>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof meControllerFindAll>>, TError> & {swrKey: Key}, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? (() => getMeControllerFindAllKey())
  const swrFn = () => meControllerFindAll(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Updates the profile of the current user
 */
export const meControllerUpdate = (
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/me`,
      updateUserDto,options
    );
  }


/**
 * @summary Deletes the profile of the current user
 */
export const meControllerRemove = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/me`,options
    );
  }


